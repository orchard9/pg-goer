name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Get tag name
      id: tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binaries
      run: |
        mkdir -p dist
        
        # Build for multiple platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          GOOS=${platform%/*}
          GOARCH=${platform#*/}
          binary_name="pg-goer-${GOOS}-${GOARCH}"
          
          if [ "$GOOS" = "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          
          echo "Building for $GOOS/$GOARCH..."
          GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags="-s -w -X main.version=${{ steps.tag.outputs.VERSION }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o "dist/${binary_name}" \
            ./cmd/pg-goer
          
          # Create compressed archives
          cd dist
          if [ "$GOOS" = "windows" ]; then
            zip "${binary_name%.*}.zip" "$binary_name"
          else
            tar -czf "${binary_name}.tar.gz" "$binary_name"
          fi
          cd ..
        done

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk '/^## \[${{ steps.tag.outputs.VERSION }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > current_changelog.txt
        else
          # Generate basic changelog from commits
          echo "## Changes" > current_changelog.txt
          git log --oneline $(git describe --tags --abbrev=0 HEAD^)..HEAD >> current_changelog.txt || echo "Initial release" >> current_changelog.txt
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        cat current_changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.VERSION }}
        name: Release ${{ steps.tag.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false
        files: |
          dist/*.tar.gz
          dist/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}